[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tbase-extractor"
version = "0.1.0"
description = "A CLI tool for extracting and listing SQL Server table metadata."
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.8"
dependencies = [
    "pyodbc",
    "python-dotenv",
    "tabulate",
    "beautifulsoup4",
    "rapidfuzz"
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=3.0.0"
]

[project.scripts]
tbase-extractor = "tbase_extractor.main:main"

[tool.setuptools]
include-package-data = true
package-dir = {"" = "."}

[tool.setuptools.packages.find]
include = ["tbase_extractor*"]

[tool.setuptools.package-data]
"tbase_extractor" = ["sql_templates/*.sql"]

# Black configuration
[tool.black]
line-length = 120
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py38"
line-length = 120

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused arguments
    "SIM", # flake8-simplify
    "COM", # flake8-commas
    "C90", # mccabe complexity
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex (we'll address this gradually)
    "B904",  # use raise from to specify exception cause
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG001", "ARG002"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["tbase_extractor"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start lenient, tighten over time
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "pyodbc.*",
    "rapidfuzz.*",
    "tabulate.*",
    "bs4.*"
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["tbase_extractor"]
omit = [
    "tests/*",
    "venv/*",
    ".venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Flake8 configuration
[tool.flake8]
max-line-length = 120
max-complexity = 10
ignore = [
    "E203",  # whitespace before ':' (conflicts with black)
    "E501",  # line too long (handled by black with max-line-length)
    "W503",  # line break before binary operator (conflicts with black)
    "W504",  # line break after binary operator (conflicts with black)
]
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
]
docstring-convention = "google"
